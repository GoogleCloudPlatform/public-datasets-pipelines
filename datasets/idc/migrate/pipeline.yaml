# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

resources: ~

dag:
  airflow_version: 2
  initialize:
    dag_id: idc_tcia_transfer_bq_data
    default_args:
      owner: "Google"
      depends_on_past: False
      start_date: '2021-03-01'
    max_active_runs: 1
    schedule_interval: "@monthly"
    catchup: False
    default_view: graph

  tasks:

    # - operator: "BashOperator"
    #   description: "Task to copy IDC v1 dataset from source to destination"
    #   args:
    #     task_id: "transfer_idc_v1_db_bash"
    #     # impersonation_chain: "{{ var.json.idc.container_registry.impersonation_account }}"
    #     bash_command: |
    #       CLOUDSDK_PYTHON="/usr/bin/python" /usr/bin/bq mk --transfer_config --project_id=$target_project_id --data_source=cross_region_copy --target_dataset=idc_v1 --display_name='copy_idc_v1' --params='{"source_dataset_id":"idc_v1","source_project_id":"$source_project_id","overwrite_destination_table":"false"}'
    #       # cat /usr/lib/google-cloud-sdk/lib/googlecloudsdk/core/execution_utils.py
    #       # /usr/bin/bq mk --transfer_config --project_id=$target_project_id --data_source=cross_region_copy --target_dataset=idc_v1 --display_name='copy_idc_v1' --params='{"source_dataset_id":"idc_v1","source_project_id":"$source_project_id","overwrite_destination_table":"false"}'
    #       # which python
    #       # python --version
    #       # echo $PATH
    #       # which bq
    #       # ls -la /usr/lib/google-cloud-sdk/lib/googlecloudsdk/core
    #     env:
    #       source_gcs_bucket: "{{ var.json.idc.container_registry.source_bucket }}"
    #       source_gcs_files: "{{ var.json.idc.container_registry.source_object }}"
    #       source_project_id: "{{ var.json.idc.container_registry.source_project }}"
    #       source_dataset_prefix: "{{ var.json.idc.container_registry.source_dataset_prefix }}"
    #       source_dataset_list: >-
    #         [ "idc_v1", "idc_v2", "idc_v3", "idc_v4", "idc_v5" ]
    #       target_gcs_bucket: "{{ var.json.idc.container_registry.destination_bucket }}"
    #       target_gcs_path: "{{ var.json.idc.container_registry.destination_path }}"
    #       target_project_id: "{{ var.json.idc.container_registry.destination_project_id }}"
    #       user_id: "{{ var.json.idc.container_registry.impersonation_account }}"

    - operator: "KubernetesPodOperator"
      description: "Transfer IDC Databases"
      args:
        task_id: "transfer_idc_db"
        name: "transfer_idc"
        namespace: "default"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: cloud.google.com/gke-nodepool
                      operator: In
                      values:
                        - "pool-e2-standard-4"
        image_pull_policy: "Always"
        image: "{{ var.json.idc.container_registry.run_csv_transform_kub }}"
        env_vars:
          SOURCE_PROJECT_ID: "{{ var.json.idc.container_registry.source_project }}"
          SOURCE_DATASET_LIST: >-
            [ "idc_v1", "idc_v2", "idc_v3", "idc_v4", "idc_v5" ]
          TARGET_PROJECT_ID: "{{ var.json.idc.container_registry.destination_project_id }}"
          USER_ID: "{{ var.json.idc.container_registry.impersonation_account }}"
        resources:
          limit_memory: "8G"
          limit_cpu: "3"

    - operator: "GoogleCloudStorageToGoogleCloudStorageOperator"
      description: "Task to run a GoogleCloudStorageToGoogleCloudStorageOperator"
      args:
        task_id: "transfer_image_files"
        source_bucket: "{{ var.json.idc.source_bucket }}"
        source_object: "{{ var.json.idc.source_object }}"
        destination_bucket: "{{ var.json.idc.destination_bucket }}"
        destination_object: "{{ var.json.idc.destination_path }}"
        move_object: False
        replace: False
        impersonation_chain: "{{ var.json.idc.impersonation_account }}"

  graph_paths:
    - "transfer_idc_v1_db >> transfer_image_files"
