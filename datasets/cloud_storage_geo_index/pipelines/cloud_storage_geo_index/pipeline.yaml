# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
resources:
  - type: bigquery_table
    table_id: landsat_index
    description: "Landsat_Index Dataset"
  - type: bigquery_table
    table_id: sentinel_2_index
    description: "Sentinel_2_Index Dataset"

dag:
  airflow_version: 2
  initialize:
    dag_id: cloud_storage_geo_index
    default_args:
      owner: "Google"
      depends_on_past: False
      start_date: '2021-03-01'
    max_active_runs: 1
    schedule_interval: "0 6 * * 1"  # 06:00 on Monday
    catchup: False
    default_view: graph

  tasks:
    - operator: "GKECreateClusterOperator"
      args:
        task_id: "create_cluster"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        body:
          name: cloud-storage-geo-index
          initial_node_count: 4
          network: "{{ var.value.vpc_network }}"
          node_config:
            machine_type: e2-standard-16
            oauth_scopes:
              - https://www.googleapis.com/auth/devstorage.read_write
              - https://www.googleapis.com/auth/cloud-platform
    - operator: "GKEStartPodOperator"
      description: "Run Landsat index transform within kubernetes pod"
      args:
        task_id: "landsat_index"
        name: "landsat_index"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        cluster_name: cloud-storage-geo-index
        namespace: "default"
        image_pull_policy: "Always"
        image: "{{ var.json.cloud_storage_geo_index.container_registry.run_csv_transform_kub }}"
        env_vars:
          PIPELINE_NAME: "Cloud Storage GEO Index - Landsat Index"
          SOURCE_URL: "https://storage.googleapis.com/gcp-public-data-landsat/index.csv.gz"
          SOURCE_ZIPFILE: "files/cloud_storage_geo_index-landsat_index-data.csv.gz"
          SOURCE_FILE: "files/cloud_storage_geo_index-landsat_index-data.csv"
          TARGET_FILE: "files/cloud_storage_geo_index-landsat_index-data_output.csv"
          CHUNKSIZE: "1000000"
          PROJECT_ID: "{{ var.value.gcp_project }}"
          DATASET_ID: "cloud_storage_geo_index"
          TABLE_ID: "landsat_index"
          TARGET_GCS_BUCKET: "{{ var.value.composer_bucket }}"
          TARGET_GCS_PATH: "data/cloud_storage_geo_index/landsat_index/data_output.csv"
          SCHEMA_PATH: "data/cloud_storage_geo_index/schema/cloud_storage_geo_index_landsat_index_schema.json"
          DROP_DEST_TABLE: "Y"
          INPUT_FIELD_DELIMITER: ","
          REMOVE_SOURCE_FILE: "Y"
          DELETE_TARGET_FILE: "Y"
          INPUT_CSV_HEADERS: >-
            [
              "SCENE_ID",
              "PRODUCT_ID",
              "SPACECRAFT_ID",
              "SENSOR_ID",
              "DATE_ACQUIRED",
              "COLLECTION_NUMBER",
              "COLLECTION_CATEGORY",
              "SENSING_TIME",
              "DATA_TYPE",
              "WRS_PATH",
              "WRS_ROW",
              "CLOUD_COVER",
              "NORTH_LAT",
              "SOUTH_LAT",
              "WEST_LON",
              "EAST_LON",
              "TOTAL_SIZE",
              "BASE_URL"
            ]
          DATA_DTYPES: >-
            {
              "SCENE_ID": "str",
              "PRODUCT_ID": "str",
              "SPACECRAFT_ID": "str",
              "SENSOR_ID": "str",
              "DATE_ACQUIRED": "str",
              "COLLECTION_NUMBER": "str",
              "COLLECTION_CATEGORY": "str",
              "SENSING_TIME": "str",
              "DATA_TYPE": "str",
              "WRS_PATH": "str",
              "WRS_ROW": "str",
              "CLOUD_COVER": "str",
              "NORTH_LAT": "str",
              "SOUTH_LAT": "str",
              "WEST_LON": "str",
              "EAST_LON": "str",
              "TOTAL_SIZE": "str",
              "BASE_URL": "str"
            }
          RENAME_HEADERS_LIST: >-
            {
              "SCENE_ID": "scene_id",
              "PRODUCT_ID": "product_id",
              "SPACECRAFT_ID": "spacecraft_id",
              "SENSOR_ID": "sensor_id",
              "DATE_ACQUIRED": "date_acquired",
              "COLLECTION_NUMBER": "collection_number",
              "COLLECTION_CATEGORY": "collection_category",
              "SENSING_TIME": "sensing_time",
              "DATA_TYPE": "data_type",
              "WRS_PATH": "wrs_path",
              "WRS_ROW": "wrs_row",
              "CLOUD_COVER": "cloud_cover",
              "NORTH_LAT": "north_lat",
              "SOUTH_LAT": "south_lat",
              "WEST_LON": "west_lon",
              "EAST_LON": "east_lon",
              "TOTAL_SIZE": "total_size",
              "BASE_URL": "base_url"
            }
          REORDER_HEADERS_LIST: >-
            [
              "scene_id",
              "product_id",
              "spacecraft_id",
              "sensor_id",
              "date_acquired",
              "sensing_time",
              "collection_number",
              "collection_category",
              "data_type",
              "wrs_path",
              "wrs_row",
              "cloud_cover",
              "north_lat",
              "south_lat",
              "west_lon",
              "east_lon",
              "total_size",
              "base_url"
            ]
          TABLE_DESCRIPTION: "Landsat index table"
          TABLE_CLUSTERING_FIELD_LIST: >-
            [
              "spacecraft_id",
              "sensor_id",
              "wrs_path",
              "wrs_row"
            ]
          TABLE_PARTITION_FIELD: "sensing_time"
          TABLE_PARTITION_FIELD_TYPE: "MONTH"
        resources:
          limit_memory: "32G"
          limit_cpu: "2"
    - operator: "GKEStartPodOperator"
      description: "Run CSV transform within kubernetes pod"
      args:
        task_id: "sentinel_2_index"
        name: "sentinel_2_index"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        cluster_name: cloud-storage-geo-index
        namespace: "default"
        image_pull_policy: "Always"
        image: "{{ var.json.cloud_storage_geo_index.container_registry.run_csv_transform_kub }}"
        env_vars:
          PIPELINE_NAME: "Cloud Storage GEO Index - Sentinel 2 Index"
          SOURCE_URL: "https://storage.googleapis.com/gcp-public-data-sentinel-2/index.csv.gz"
          SOURCE_ZIPFILE: "files/cloud_storage_geo_index-sentinel_2-data.csv.gz"
          SOURCE_FILE: "files/cloud_storage_geo_index-sentinel_2-data.csv"
          TARGET_FILE: "files/cloud_storage_geo_index-sentinel_2-data_output.csv"
          CHUNKSIZE: "1000000"
          PROJECT_ID: "{{ var.value.gcp_project }}"
          DATASET_ID: "cloud_storage_geo_index"
          TABLE_ID: "sentinel_2_index"
          TARGET_GCS_BUCKET: "{{ var.value.composer_bucket }}"
          TARGET_GCS_PATH: "data/cloud_storage_geo_index/sentinel_2_index/data_output.csv"
          SCHEMA_PATH: "data/cloud_storage_geo_index/schema/cloud_storage_geo_index_sentinel_2_schema.json"
          DROP_DEST_TABLE: "Y"
          INPUT_FIELD_DELIMITER: ","
          REMOVE_SOURCE_FILE: "Y"
          DELETE_TARGET_FILE: "Y"
          INPUT_CSV_HEADERS: >-
            [
              "GRANULE_ID",
              "PRODUCT_ID",
              "DATATAKE_IDENTIFIER",
              "MGRS_TILE",
              "SENSING_TIME",
              "TOTAL_SIZE",
              "CLOUD_COVER",
              "GEOMETRIC_QUALITY_FLAG",
              "GENERATION_TIME",
              "NORTH_LAT",
              "SOUTH_LAT",
              "WEST_LON",
              "EAST_LON",
              "BASE_URL"
            ]
          DATA_DTYPES: >-
            {
              "GRANULE_ID": "str",
              "PRODUCT_ID": "str",
              "DATATAKE_IDENTIFIER": "str",
              "MGRS_TILE": "str",
              "SENSING_TIME": "str",
              "TOTAL_SIZE": "str",
              "CLOUD_COVER": "str",
              "GEOMETRIC_QUALITY_FLAG": "str",
              "GENERATION_TIME": "str",
              "NORTH_LAT": "str",
              "SOUTH_LAT": "str",
              "WEST_LON": "str",
              "EAST_LON": "str",
              "BASE_URL": "str"
            }
          RENAME_HEADERS_LIST: >-
            {
              "GRANULE_ID": "granule_id",
              "PRODUCT_ID": "product_id",
              "DATATAKE_IDENTIFIER": "datatake_identifier",
              "MGRS_TILE": "mgrs_tile",
              "SENSING_TIME": "sensing_time",
              "TOTAL_SIZE": "total_size",
              "CLOUD_COVER": "cloud_cover",
              "GEOMETRIC_QUALITY_FLAG": "geometric_quality_flag",
              "GENERATION_TIME": "generation_time",
              "NORTH_LAT": "north_lat",
              "SOUTH_LAT": "south_lat",
              "WEST_LON": "west_lon",
              "EAST_LON": "east_lon",
              "BASE_URL": "base_url"
            }
          REORDER_HEADERS_LIST: >-
            [
              "granule_id",
              "product_id",
              "datatake_identifier",
              "mgrs_tile",
              "sensing_time",
              "geometric_quality_flag",
              "generation_time",
              "north_lat",
              "south_lat",
              "west_lon",
              "east_lon",
              "base_url",
              "total_size",
              "cloud_cover"
            ]
          TABLE_DESCRIPTION: "Sentinel 2 table"
          TABLE_CLUSTERING_FIELD_LIST: >-
            [
              "product_id",
              "mgrs_tile",
              "generation_time",
              "datatake_identifier"
            ]
          TABLE_PARTITION_FIELD: "sensing_time"
          TABLE_PARTITION_FIELD_TYPE: "MONTH"
        resources:
          limit_memory: "48G"
          limit_cpu: "2"
    - operator: "GKEDeleteClusterOperator"
      args:
        task_id: "delete_cluster"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        name: cloud-storage-geo-index

  graph_paths:
    - "create_cluster >> [ landsat_index, sentinel_2_index ] >> delete_cluster"
