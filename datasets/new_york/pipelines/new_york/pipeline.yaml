# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
resources:

  - type: bigquery_table
    table_id: new_york
    description: "New York Pipelines"

dag:
  airflow_version: 2
  initialize:
    dag_id: new_york
    default_args:
      owner: "Google"
      depends_on_past: False
      start_date: '2021-03-01'
    max_active_runs: 1
    schedule_interval: "@daily"
    catchup: False
    default_view: graph

  tasks:
    - operator: "GKECreateClusterOperator"
      args:
        task_id: "create_cluster"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        body:
          name: pubds-new-york
          initial_node_count: 2
          network: "{{ var.value.vpc_network }}"
          # ip_allocation_policy:
          #   cluster_ipv4_cidr_block: "/26"
          node_config:
            machine_type: e2-standard-8
            oauth_scopes:
              - https://www.googleapis.com/auth/devstorage.read_write
              - https://www.googleapis.com/auth/cloud-platform

    - operator: "GKEStartPodOperator"
      description: "Run New York 311 Service Requests Pipeline"
      args:
        task_id: "transform_csv_ny_311_service_requests"
        name: "311_service_requests"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        cluster_name: pubds-new-york
        namespace: "default"
        image_pull_policy: "Always"
        image: "{{ var.json.new_york.container_registry.run_csv_transform_kub }}"
        env_vars:
          PIPELINE_NAME: "New York - 311 Service Requests"
          SOURCE_URL: "https://data.cityofnewyork.us/api/views/erm2-nwe9/rows.csv"
          CHUNKSIZE: "500000"
          SOURCE_FILE: "files/data_new_york_311_311_service_requests.csv"
          TARGET_FILE: "files/data_output_new_york_311_311_service_requests.csv"
          PROJECT_ID: "{{ var.value.gcp_project }}"
          DATASET_ID: "new_york_311"
          TABLE_ID: "311_service_requests"
          TARGET_GCS_BUCKET: "{{ var.value.composer_bucket }}"
          TARGET_GCS_PATH: "data/new_york/311_service_requests/data_output.csv"
          SCHEMA_PATH: "data/new_york/schema/ny_311_service_requests_schema.json"
          DATA_DTYPES: >-
            {
              "Unique Key": "int",
              "Created Date": "str",
              "Closed Date": "str",
              "Agency": "str",
              "Agency Name": "str",
              "Complaint Type": "str",
              "Descriptor": "str",
              "Location Type": "str",
              "Incident Zip": "str",
              "Incident Address": "str",
              "Street Name": "str",
              "Cross Street 1": "str",
              "Cross Street 2": "str",
              "Intersection Street 1": "str",
              "Intersection Street 2": "str",
              "Address Type": "str",
              "City": "str",
              "Landmark": "str",
              "Facility Type": "str",
              "Status": "str",
              "Due Date": "str",
              "Resolution Description": "str",
              "Resolution Action Updated Date": "str",
              "Community Board": "str",
              "BBL": "str",
              "Borough": "str",
              "X Coordinate (State Plane)": "str",
              "Y Coordinate (State Plane)": "str",
              "Open Data Channel Type": "str",
              "Park Facility Name": "str",
              "Park Borough": "str",
              "Vehicle Type": "str",
              "Taxi Company Borough": "str",
              "Taxi Pick Up Location": "str",
              "Bridge Highway Name": "str",
              "Bridge Highway Direction": "str",
              "Road Ramp": "str",
              "Bridge Highway Segment": "str",
              "Latitude": "float64",
              "Longitude": "float64",
              "Location": "str"
            }
          PARSE_DATES: >-
            [
              "Created Date",
              "Closed Date",
              "Due Date",
              "Resolution Action Updated Date"
            ]
          NULL_ROWS_LIST: >-
            [
              "unique_key"
            ]
          RENAME_HEADERS_LIST: >-
            {
              "Unique Key": "unique_key",
              "Created Date": "created_date",
              "Closed Date": "closed_date",
              "Agency": "agency",
              "Agency Name": "agency_name",
              "Complaint Type": "complaint_type",
              "Descriptor": "descriptor",
              "Location Type": "location_type",
              "Incident Zip": "incident_zip",
              "Incident Address": "incident_address",
              "Street Name": "street_name",
              "Cross Street 1": "cross_street_1",
              "Cross Street 2": "cross_street_2",
              "Intersection Street 1": "intersection_street_1",
              "Intersection Street 2": "intersection_street_2",
              "Address Type": "address_type",
              "City": "city",
              "Landmark": "landmark",
              "Facility Type": "facility_type",
              "Status": "status",
              "Due Date": "due_date",
              "Resolution Description": "resolution_description",
              "Resolution Action Updated Date": "resolution_action_updated_date",
              "Community Board": "community_board",
              "Open Data Channel Type": "open_data_channel_type",
              "Borough": "borough",
              "X Coordinate (State Plane)": "x_coordinate",
              "Y Coordinate (State Plane)": "y_coordinate",
              "Park Facility Name": "park_facility_name",
              "Park Borough": "park_borough",
              "Vehicle Type": "vehicle_type",
              "Taxi Company Borough": "taxi_company_borough",
              "Taxi Pick Up Location": "taxi_pickup_location",
              "Bridge Highway Name": "bridge_highway_name",
              "Bridge Highway Direction": "bridge_highway_direction",
              "Road Ramp": "road_ramp",
              "Bridge Highway Segment": "bridge_highway_segment",
              "Latitude": "latitude",
              "Longitude": "longitude",
              "Location": "location",
              "BBL": "bbl"
            }
          OUTPUT_CSV_HEADERS: >-
            [
              "unique_key",
              "created_date",
              "closed_date",
              "agency",
              "agency_name",
              "complaint_type",
              "descriptor",
              "location_type",
              "incident_zip",
              "incident_address",
              "street_name",
              "cross_street_1",
              "cross_street_2",
              "intersection_street_1",
              "intersection_street_2",
              "address_type",
              "city",
              "landmark",
              "facility_type",
              "status",
              "due_date",
              "resolution_description",
              "resolution_action_updated_date",
              "community_board",
              "borough",
              "x_coordinate",
              "y_coordinate",
              "park_facility_name",
              "park_borough",
              "bbl",
              "open_data_channel_type",
              "vehicle_type",
              "taxi_company_borough",
              "taxi_pickup_location",
              "bridge_highway_name",
              "bridge_highway_direction",
              "road_ramp",
              "bridge_highway_segment",
              "latitude",
              "longitude",
              "location"
            ]
        resources:
          request_ephemeral_storage: "10G"
          limit_cpu: "2"

    - operator: "GKEStartPodOperator"
      description: "Run New York Citibike Stations Pipeline"
      args:
        task_id: "transform_csv_ny_citibike_stations"
        name: "citibike_stations"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        cluster_name: pubds-new-york
        namespace: "default"
        image_pull_policy: "Always"
        image: "{{ var.json.new_york.container_registry.run_csv_transform_kub }}"
        env_vars:
          PIPELINE_NAME: "New York - Citibike Stations"
          SOURCE_URL_STATIONS_JSON: "https://gbfs.citibikenyc.com/gbfs/en/station_information"
          SOURCE_URL_STATUS_JSON: "https://gbfs.citibikenyc.com/gbfs/en/station_status"
          CHUNKSIZE: "750000"
          SOURCE_FILE: "files/data_new_york_citibike_citibike_stations.csv"
          TARGET_FILE: "files/data_output_new_york_citibike_citibike_stations.csv"
          PROJECT_ID: "{{ var.value.gcp_project }}"
          DATASET_ID: "new_york_citibike"
          TABLE_ID: "citibike_stations"
          TARGET_GCS_BUCKET: "{{ var.value.composer_bucket }}"
          TARGET_GCS_PATH: "data/new_york/citibike_stations/data_output.csv"
          SCHEMA_PATH: "data/new_york/schema/citibike_stations_schema.json"
          DATA_DTYPES: >-
            {
              "rental_uris": "str",
              "lat": "float64",
              "eightd_station_services": "str",
              "legacy_id_x": "str",
              "short_name": "str",
              "external_id": "str",
              "station_id": "str",
              "rental_methods": "str",
              "station_type": "str",
              "short_name": "str",
              "eightd_has_key_dispenser": "bool",
              "electric_bike_surcharge_waiver": "bool",
              "lon": "float64",
              "has_kiosk": "bool",
              "capacity": "int64",
              "region_id": "int64",
              "is_installed": "bool",
              "num_docks_available": "int64",
              "num_docks_disabled": "int64",
              "num_bikes_disabled": "int64",
              "num_bikes_available": "int64",
              "station_status": "str",
              "last_reported": "int64",
              "eightd_has_available_keys": "bool",
              "num_ebikes_available": "int64",
              "is_returning": "int64",
              "is_renting": "int64",
              "legacy_id_y": "str",
              "valet": "str",
              "eightd_active_station_services": "str"
            }
          RENAME_HEADERS_LIST: >-
            {
              "lat": "latitude",
              "lon": "longitude"
            }
          BOOLEAN_DATAPOINTS: >-
            [
              "eightd_has_key_dispenser",
              "is_installed",
              "is_renting",
              "is_returning"
            ]
          DATETIME_FIELDLIST: >-
            [
              "last_reported"
            ]
          RESOLVE_DATATYPES_LIST: >-
            {
              "region_id": "Int64",
              "rental_methods": "string"
            }
          NORMALIZE_DATA_LIST: >-
            [
              "rental_methods"
            ]
          INPUT_CSV_HEADERS: >-
            [
              "rental_uris",
              "lat",
              "eightd_station_services",
              "legacy_id_x",
              "short_name",
              "external_id",
              "station_id",
              "rental_methods",
              "station_type",
              "short_name",
              "eightd_has_key_dispenser",
              "electric_bike_surcharge_waiver",
              "lon",
              "has_kiosk",
              "capacity",
              "region_id",
              "is_installed",
              "num_docks_available",
              "num_docks_disabled",
              "num_bikes_disabled",
              "num_bikes_available",
              "station_status",
              "last_reported",
              "eightd_has_available_keys",
              "num_ebikes_available",
              "is_returning",
              "is_renting",
              "legacy_id_y",
              "valet",
              "eightd_active_station_services"
            ]
          OUTPUT_CSV_HEADERS: >-
            [
              "station_id",
              "name",
              "short_name",
              "latitude",
              "longitude",
              "region_id",
              "rental_methods",
              "capacity",
              "eightd_has_key_dispenser",
              "num_bikes_available",
              "num_bikes_disabled",
              "num_docks_available",
              "num_docks_disabled",
              "is_installed",
              "is_renting",
              "is_returning",
              "eightd_has_available_keys",
              "last_reported"
            ]
        resources:
          request_ephemeral_storage: "10G"
          limit_cpu: "2"

    - operator: "GKEStartPodOperator"
      description: "Run New York NYPD MV Collisions Pipeline"
      args:
        task_id: "transform_csv_nypd_mv_collisions"
        name: "nypd_mv_collisions"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        cluster_name: pubds-new-york
        namespace: "default"
        image_pull_policy: "Always"
        image: "{{ var.json.new_york.container_registry.run_csv_transform_kub }}"
        env_vars:
          PIPELINE_NAME: "New York - NYPD Motor Vehicle Collisions"
          SOURCE_URL: "https://nycopendata.socrata.com/api/views/h9gi-nx95/rows.csv"
          CHUNKSIZE: "150000"
          SOURCE_FILE: "files/data_new_york_mv_collisions_nypd_mv_collisions.csv"
          TARGET_FILE: "files/data_output_new_york_mv_collisions_nypd_mv_collisions.csv"
          PROJECT_ID: "{{ var.value.gcp_project }}"
          DATASET_ID: "new_york_mv_collisions"
          TABLE_ID: "nypd_mv_collisions"
          TARGET_GCS_BUCKET: "{{ var.value.composer_bucket }}"
          TARGET_GCS_PATH: "data/new_york/nypd_mv_collisions/data_output.csv"
          SCHEMA_PATH: "data/new_york/schema/nypd_mv_collisions_schema.json"
          DATA_DTYPES: >-
            {
              "CRASH DATE": "str",
              "CRASH TIME": "str",
              "BOROUGH": "str",
              "ZIP CODE": "str",
              "LATITUDE": "float64",
              "LONGITUDE": "float64",
              "LOCATION": "str",
              "ON STREET NAME": "str",
              "CROSS STREET NAME": "str",
              "OFF STREET NAME": "str",
              "NUMBER OF PERSONS INJURED": "str",
              "NUMBER OF PERSONS KILLED" : "str",
              "NUMBER OF PEDESTRIANS INJURED" : "str",
              "NUMBER OF PEDESTRIANS KILLED" : "str",
              "NUMBER OF CYCLIST INJURED" : "str",
              "NUMBER OF CYCLIST KILLED" : "str",
              "NUMBER OF MOTORIST INJURED" : "str",
              "NUMBER OF MOTORIST KILLED" : "str",
              "CONTRIBUTING FACTOR VEHICLE 1" : "str",
              "CONTRIBUTING FACTOR VEHICLE 2" : "str",
              "CONTRIBUTING FACTOR VEHICLE 3" : "str",
              "CONTRIBUTING FACTOR VEHICLE 4" : "str",
              "CONTRIBUTING FACTOR VEHICLE 5" : "str",
              "COLLISION_ID": "int64",
              "VEHICLE TYPE CODE 1" : "str",
              "VEHICLE TYPE CODE 2" : "str",
              "VEHICLE TYPE CODE 3" : "str",
              "VEHICLE TYPE CODE 4" : "str",
              "VEHICLE TYPE CODE 5": "str"
            }
          RESOLVE_DATATYPES_LIST: >-
            {
              "latitude": "float64",
              "longitude": "float64",
              "number_of_cyclist_injured": "int64",
              "number_of_cyclist_killed": "int64",
              "number_of_motorist_injured": "int64",
              "number_of_motorist_killed": "int64",
              "number_of_pedestrians_injured": "int64",
              "number_of_pedestrians_killed": "int64",
              "number_of_persons_injured": "int64",
              "number_of_persons_killed": "int64"
            }
          TRANSFORM_LIST: >-
            [ "replace_regex", "add_crash_timestamp", "convert_date_format", "rename_headers", "resolve_datatypes", "reorder_headers" ]
          REGEX_LIST: >-
            [
              [ "OFF STREET NAME", "\\n", " " ]
            ]
          DATE_FORMAT_LIST: >-
            [
              ["timestamp", "%m/%d/%Y %H:%M", "%Y-%m-%d %H:%M:%S"]
            ]
          CRASH_FIELD_LIST: >-
            [ [ "timestamp", "CRASH DATE", "CRASH TIME" ] ]
          RENAME_HEADERS_LIST: >-
            {
              "BOROUGH": "borough",
              "CONTRIBUTING FACTOR VEHICLE 1": "contributing_factor_vehicle_1",
              "CONTRIBUTING FACTOR VEHICLE 2": "contributing_factor_vehicle_2",
              "CONTRIBUTING FACTOR VEHICLE 3": "contributing_factor_vehicle_3",
              "CONTRIBUTING FACTOR VEHICLE 4": "contributing_factor_vehicle_4",
              "CONTRIBUTING FACTOR VEHICLE 5": "contributing_factor_vehicle_5",
              "CROSS STREET NAME": "cross_street_name",
              "LATITUDE": "latitude",
              "LONGITUDE": "longitude",
              "LOCATION": "location",
              "NUMBER OF CYCLIST INJURED": "number_of_cyclist_injured",
              "NUMBER OF CYCLIST KILLED": "number_of_cyclist_killed",
              "NUMBER OF MOTORIST INJURED": "number_of_motorist_injured",
              "NUMBER OF MOTORIST KILLED": "number_of_motorist_killed",
              "NUMBER OF PEDESTRIANS INJURED": "number_of_pedestrians_injured",
              "NUMBER OF PEDESTRIANS KILLED": "number_of_pedestrians_killed",
              "NUMBER OF PERSONS INJURED": "number_of_persons_injured",
              "NUMBER OF PERSONS KILLED": "number_of_persons_killed",
              "OFF STREET NAME": "off_street_name",
              "ON STREET NAME": "on_street_name",
              "COLLISION_ID": "unique_key",
              "VEHICLE TYPE CODE 1": "vehicle_type_code1",
              "VEHICLE TYPE CODE 2": "vehicle_type_code2",
              "VEHICLE TYPE CODE 3": "vehicle_type_code_3",
              "VEHICLE TYPE CODE 4": "vehicle_type_code_4",
              "VEHICLE TYPE CODE 5": "vehicle_type_code_5",
              "ZIP CODE": "zip_code"
            }
          REORDER_HEADERS_LIST: >-
            [
              "borough",
              "contributing_factor_vehicle_1",
              "contributing_factor_vehicle_2",
              "contributing_factor_vehicle_3",
              "contributing_factor_vehicle_4",
              "contributing_factor_vehicle_5",
              "cross_street_name",
              "timestamp",
              "latitude",
              "longitude",
              "location",
              "number_of_cyclist_injured",
              "number_of_cyclist_killed",
              "number_of_motorist_injured",
              "number_of_motorist_killed",
              "number_of_pedestrians_injured",
              "number_of_pedestrians_killed",
              "number_of_persons_injured",
              "number_of_persons_killed",
              "off_street_name",
              "on_street_name",
              "unique_key",
              "vehicle_type_code1",
              "vehicle_type_code2",
              "vehicle_type_code_3",
              "vehicle_type_code_4",
              "vehicle_type_code_5",
              "zip_code"
            ]
        resources:
          request_ephemeral_storage: "10G"
          limit_cpu: "2"

    - operator: "GKEStartPodOperator"
      description: "Run New York Tree Census 1995 Pipeline"
      args:
        task_id: "transform_csv_ny_tree_census_1995"
        name: "tree_census_1995"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        cluster_name: pubds-new-york
        namespace: "default"
        image_pull_policy: "Always"
        image: "{{ var.json.new_york.container_registry.run_csv_transform_kub }}"
        env_vars:
          PIPELINE_NAME: "New York - Tree Census 1995"
          SOURCE_URL: "https://data.cityofnewyork.us/api/views/kyad-zm4j/rows.csv"
          CHUNKSIZE: "750000"
          SOURCE_FILE: "files/data_new_york_trees_tree_census_1995.csv"
          TARGET_FILE: "files/data_output_new_york_trees_tree_census_1995.csv"
          PROJECT_ID: "{{ var.value.gcp_project }}"
          DATASET_ID: "new_york_trees"
          TABLE_ID: "tree_census_1995"
          TARGET_GCS_BUCKET: "{{ var.value.composer_bucket }}"
          TARGET_GCS_PATH: "data/new_york/tree_census_1995/data_output.csv"
          SCHEMA_PATH: "data/new_york/schema/tree_census_1995_schema.json"
          RENAME_HEADERS_LIST: >-
            {
              "RecordId": "recordid",
              "Address": "address",
              "House_Number": "house_number",
              "Street": "street",
              "Postcode_Original": "zip_original",
              "Community Board_Original": "cb_original",
              "Site": "site",
              "Species": "species",
              "Diameter": "diameter",
              "Condition": "status",
              "Wires": "wires",
              "Sidewalk_Condition": "sidewalk_condition",
              "Support_Structure": "support_structure",
              "Borough": "borough",
              "X": "x",
              "Y": "y",
              "Longitude": "longitude",
              "Latitude": "latitude",
              "CB_New": "cb_new",
              "Zip_New": "zip_new",
              "CensusTract_2010": "censustract_2010",
              "CensusBlock_2010": "censusblock_2010",
              "NTA_2010": "nta_2010",
              "SegmentID": "segmentid",
              "Spc_Common": "spc_common",
              "Spc_Latin": "spc_latin",
              "Location": "location"
            }
          REMOVE_WHITESPACE_LIST: >-
            [
              "spc_latin"
            ]
          REORDER_HEADERS_LIST: >-
            [
              "recordid",
              "address",
              "house_number",
              "street",
              "zip_original",
              "cb_original",
              "site",
              "species",
              "diameter",
              "status",
              "wires",
              "sidewalk_condition",
              "support_structure",
              "borough",
              "x",
              "y",
              "longitude",
              "latitude",
              "cb_new",
              "zip_new",
              "censustract_2010",
              "censusblock_2010",
              "nta_2010",
              "segmentid",
              "spc_common",
              "spc_latin",
              "location"
            ]
        resources:
          request_ephemeral_storage: "10G"
          limit_cpu: "2"

    - operator: "GKEDeleteClusterOperator"
      args:
        task_id: "delete_cluster"
        project_id: "{{ var.value.gcp_project }}"
        location: "us-central1-c"
        name: pubds-new-york

  graph_paths:
    - "create_cluster >> [transform_csv_nypd_mv_collisions, transform_csv_ny_citibike_stations, transform_csv_ny_tree_census_1995 ] >> transform_csv_ny_311_service_requests >> delete_cluster"
