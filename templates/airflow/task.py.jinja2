{#
Copyright 2021 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}

{% set indent_size = 4 * indent_level %}
{% filter indent(width=indent_size) -%}

{# If the task is non-iterated, i.e. a single operator, render as usual. #}
{%- if not task.get("iterate") %}
    {% if dag_has_iterated_task %}
        {% set task_name = "t[" + task["args"]["task_id"] + "]" %}
    {% else %}
        {% set task_name = task["args"]["task_id"] %}
    {% endif %}
    {{ task_name }} = {{ airflow_ns[task["operator"]]["class"] }}(
        {% for name, val in task["args"].items() %}
            {% if val is string and val.startswith("f\"") %}
                {{ name }}={{ val }},
            {% elif val is iterable and (val is not string and val is not mapping) %}
                {{ name }}=[
                    {% for el in val %}
                        {% if el is string and el.startswith("f\"") %}
                            {{ el }},
                        {% else %}
                            {{ el|tojson if el is string else el }},
                        {% endif %}
                    {% endfor %}
                ],
            {% else %}
                {{ name }}={{ val|tojson if val is string else val }},
            {% endif %}
        {% endfor %}
    )

{#
If the task is iterated, first render the Python for loop statement,

    for iter_vars in iterable:

then, recursively call this template for each task in the iteration.
#}
{% else %}
    {% set iterate = task["iterate"] %}
    {% if iterate["type"] == "range" %}
        {% set iterable = iterate["type"] + "(" + iterate["args"]|join(", ") + ")" %}
    {% else %}
        {% set iterable = iterate["type"] + "(" + iterate["args"]|tojson + ")" %}
    {% endif -%}

    {%- if iterate.get("enumerate") %}
        {% set iterable = "enumerate(" + iterable + ")" %}
    {% endif -%}

    {%- set iter_vars = iterate["vars"]|join(", ") %}
    for {{ iter_vars }} in {{ iterable }}:
    {% for _task in iterate["iteration"] %}
        {% with task = _task, indent_level = indent_level + 1 %}
            {% include "task.py.jinja2" %}
        {% endwith -%}
    {% endfor %}
{% endif %}
{% endfilter %}
